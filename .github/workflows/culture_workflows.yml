name: Tests
on:
  push:
    branches: [ "develop" ]
  workflow_dispatch:
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11
    - name: Install poetry
      run: pip install poetry  
    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      run: poetry install    
    - name: Add required packages
      run: |
          poetry add flake8
          poetry add flake8-blind-except
          poetry add flake8-broken-line
          poetry add flake8-return
          poetry add flake8-variables-names
          poetry add pep8-naming
          poetry add isort
    - name: Run the tests
      run: | 
          poetry run python -m flake8
          poetry run python -m isort . -c

  build_and_push_to_docker_hub:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest
      needs: tests

      steps:
      -
        name: Check out the repo
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Push backend application to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: admin-panel
          push: true
          tags: dcomrad/culture-admin:latest
      -
        name: Push frontend application to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: bot
          push: true
          tags: dcomrad/culture-bot:latest

  deploy:
      name: Deploy to the remote server
      runs-on: ubuntu-latest
      needs: build_and_push_to_docker_hub

      steps:
      -
        name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            sudo docker pull dcomrad/culture-admin
            sudo docker container stop culture-admin
            sudo docker container rm culture-admin
            sudo docker pull dcomrad/culture-bot
            sudo docker container stop culture-bot
            sudo docker container rm culture-bot
            cd ~/infra
            sudo docker compose up -d
            sudo docker image prune -f
